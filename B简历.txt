

注意: B简历是对A简历的一个完善

## STAT法则

- 情景
  - 为什么要有这个东西?这个东西是什么?
- 目标
  - 通过这个东西能够干嘛或者这个东西能够帮助我们解决什么问题
- 行动
  - 这个东西怎么用,你在项目中那个地方用过
- 结果
  - 通过这个东西你实现什么功能,具体怎么实现的

## 一、自我介绍

​		您好，我叫付义航，今年24岁，老家是河南省平顶山市的。做前端开发已经快3年了，期间换过2家公司，第一家是一个外包类型公司，叫北京糯米网科技发展有限公司；上一家叫北京五木恒润科技有限公司 ，上一家公司是外包公司，做别人的产品，在上一家公司呆了一年，开发团队大概4.5十个吧好像人，一共5个小组，我们小组8人，前端2人，后端4人，做了3个项目，上一家公司前端主要是用vue技术，后端是用php,java技术。

​                                   

## 公司介绍：

1：北京五木恒润科技有限公司于2007年05月18日成立。法定代表人张德运，公司经营范围包括：技术开发、技术推广、技术转让、技术咨询、技术服务；销售计算机、软件及辅助设备、电子产品、机械设备；计算机系统服务；基础软件服务；应用软件服务（不含医疗软件）；软件开发；产品设计；模型设计；包装装潢设计；经济信息咨询（不含中介）；公共关系服务；会议服务；电脑动画设计；企业策划；设计；设计、制作、代理、发布广告；市场调查；企业管理；组织文化艺术交流活动（不含演出）；承办展览展示；会议服务；影视策划；翻译服务；自然科学研究与试验发展；工程和技术研究和试验发展；农业科学研究与试验发展；医学研究与试验发展；数据处理（仅限于PUE值在1.5以下的云计算）等:

2：名称北京[糯米网](https://baike.baidu.com/item/糯米网)科技发展有限公司类型有限责任公司(自然人投资或控股)法定代表人金宇注册资本100 万元 人民币成立日期2006年04月17日营业期限自2006年04月17日营业期限至2026年04月16日登记机关海淀分局核准日期2014年09月03登记状态
　　在营（开业）企业互联网信息服务业务（除新闻、出版、教育、医疗保健、药品、医疗器械以外的内容）；利用网站发布网络广告；设计、制作、代理、发布广告；技术开发、技术服务、技术转让、技术咨询；经济贸易咨询；企业策划。

## 二、面试官会问到的问题

1. **你从上一家公司离职的原因是什么?**

   - 因为家里的原因，需要请假回去，但是时间有点长，然后和领导商量了一下，就先离职了。

2. **你上一家公司在那里?**

   北京五木恒润科技有限公司地址    北京市昌平区回龙观镇立业路13号1幢1至3层101-2062

   第一家公司北京糯米网科技发展有限公司    北京市海淀区上地十街10号1幢6层609

3. **那你现在住在那里?**

   北京-昌平区-沙河地铁站附近

4. **你到你上一家公司需要多久,坐什么车,需要走多久,到那个地方下车?**

   公交，半个小时就到

5. **你上一家是做什么的?**

   设计、制作、发布、代理国内各类广告；技术开发、技术服务、技术转让、技术咨询；经济贸易咨询；企业策划。

6. **上一家公司多少人?或者你们公司技术团队多少人？ 前端几个人，后端几个人？**

   公司具体多少人我记不清了,刚好钉钉群或者微信群离职的时候给退了,所以现在具体多少人我也不太清楚,但是我们那个开发小组是8个人,2个前端,4个后端,1个产品,1个测试

7. **上一家公司给你的薪资是多少?**

   14k

8. **你是那个学校毕业的?**

   郑州工商学院

9. **你是什么学历?**

   本科

10. **你的学历是公办还是民办?**

    我上的这个学校是一个民办的学校

11. **你学的是那个专业?** 

    计算机科学与技术

12. **这个专业你都学过哪些课程或者你上大学都学过计算机哪些课程?你学的这些知识你还记得多少?你们的校训是什么?**

    - 我们的课程分为专业课和非专业课

      ​	非专业课: 马克思主义 大学英语 高等数学 

      ​	专业课: 计算机基础 软件工程 数据库原理 c语音 java asp c# 

    - 时间太久很多东西都忘了 

    - 厚德 博学 求实

13. **你为什么选择前端或者你是怎么接触到前端的?**

    - 我大学就是计算机专业的,所以大学毕业后就做的是开发，然后后来因为我一个哥就是专业的这个前端，他带着我教会了我很多，然后后来我就想自己出来锻炼锻炼，因为总不能有人一直照看着吧，然后就自己出来找工作了。

      

14. **你有没有在培训机构培训过?**

    - 没有

15. **你找工作找了多久了?**

    - 正确回答: 刚开始找,已经面试了两三家，感觉期中有一家对我挺有善意的。

16. **你感觉你的优点是什么? 缺点是什么?**

    - 学习态度比较认真，一般在工作中遇到bug是比较死脑筋，非要给他搞好。

17. **谈谈你对前端的看法?**

    ​        目前，在很多公司，前端只zhi是一个页面制作，他们负责把psd稿转为daohtml文件，然后交给后台工程师套页面。如果还有哪个老板在这样组织他的队伍，那我想他正在做的产品一定不是什么好产品。这种做法，无视人的本性，把人的机器用。我相信任何一个前端都可以承担的更多，发挥更大的价值，他们需要的只是上级的肯定与信任。只要一个人真正热爱前端，我愿意给他机会让他承担的更多。可惜我不是老板。
    比较理想的情况。前端的输入依然是psd稿，当然如果产品和设计能力不够，还可能需要前端参与交互设计。输出则是一个可以工作的模块或页面。前端直接从服务器模板（php,jsp）开始工作，前后端同学在开始工作前定好页面内应该种的变量以及ajax通信的接口，随后独立开发，最后连调测试。这种开发方式前端可以根据接口和数据结构来来设计页面的html结构和css结构，把冗余工作降到最低。同时也会让前端发挥更大的主观能动性，让枯燥的工作变的有趣。同时后台工程师，也可以更加关注底层算法与数据存储于通信的逻辑。
    近十年，不断发生的一件事情就是，越来越多的软件开始在浏览器里运行。随着google和火狐的webos的发展，甚至在不久的将来，浏览器的api，会替代操作系统的 sdk 成为软件开发标准。随着html5的发展，浏览器里运行的早已不是简单的页面，而是复杂的web应用。前端工程师也早已不是页面制作，而是web应用工程师。
    当然，也有一个让我比较担忧的问题，未来究竟是web时代还是app时代？如果是app时代，前端技术的价值可能会降低（虽然也可以使用前端技术开发app，但各方面都要比原生应用差很多）。我想，关于这个问题，也许就像“天下大事，合久必分，分久必合”一样。web与app会长期共存，此消彼长，互相促进。如果精力够，我还是建议前端工程师去学习下app开发。有一技傍身总是好的。（自己总结这说）

18. **你上一家公司用的什么技术?**

    你擅长什么技术就说什么技术

    vue

19. **你感觉那一个项目是你最满意的项目?你为什么觉得她是你最满意的项目?**

    - 后台管理项目的方面，因为做的比较多，所以对这里面的各种功能还是挺熟悉的。

20. **那你对我们公司有没有了解?**

    - 没有,您能不能给我介绍一下贵公司
    
21. **你上一家公司什么类型公司? 是外包呢还是自己公司的产品?**

    外包公司

22. **你的项目有没有上线地址?**

    没有

23. **你感觉你上家公司怎么样?**

    公司团队氛围好,领导对我还是挺好的,不管是在技术或者在其他生活方面都给我带来很多的帮助，一直在成长。

24. **你在你上家公司的收获是什么?**

    收获了技术和同事,还有领导，而且锻炼了我

## 三、项目介绍

**项目背景**

- ​        您好,我给您说一下最近这个公司做的项目。这个是在这家公司最后做的项目是一个电商类型的后台管理系统的，然后是我负责的。我们就是ui先设计图 以及原型 还有原型文档 要做出好几趟方案 最后和领导商量用那一套 然后 下来就是前端 是分成几个小组 一组负责一个模块  然后前端出来页面 后端给一个模拟接口 试试能不能走通。但是在这期间，还会有ui看看看设计图，对你提出一些代码规范 以及那块不合适会让你去改，之后就是和后端的配合去调取数据的时候看看会出现数据的缺失什么的，可以去和后端商量。    我当时的这个项目小组,前端我们两个人,后端是四个人,产品和测试各1人. 我当时做的这个项目的名字叫元宝后台管理系统,这是一个后台管理系统的项目

- **项目所使用的技术**

  在这个项目开发的时候,主要用到了(vue、element-ui、bootstrap、sass、html5、css3、es6、vuex、webpack、axios)vue全家桶

- **负责的内容**

  我在写这个项目的时候主要负责哪些模块(登录，退出登录，权限验证，首页布局，用户管理、课程管理、订单管理、题库管理，跨越，loding加载，请求头，分页，数据遍历，封装vuex等 )

- **项目功能**

  这个项目都有哪些功能(判断通过token值来验证是否登录，首页的布局，后台管理的增删改查，filters遍历，搜索查询等)

  

  增加，是使用接口通过传参，再调用获取数据的接口，完成添加

  删除的话，就是传参一个id然后掉接口就可以了，然后也要调用获取数据的接口

  修改的话，通过双向数据绑定，调用接口进行修改，然后在调用获取数据的接口

  查询的话，就是通过数据绑定，然后在计算属性中查询并返回，indexof所要查询数据的名称，然后在渲染出来。

  

  filters遍历，在页面中使用管道符,前面的是要遍历的对象,后面的就是最后我们所需要的数据,给他渲染到页面中,使用find遍历我们的的数据，对应下标并返回。

  

  权限验证登录，是创建一个js文件，然后在里面获取token数据，进行判断，如果没有的话，并且跳转的不是登录页面，就让他去跳转到登录页面去进行登录。如果有的话，就去判断是否有用户信息，有就正常进行跳转页面，然后没有跳转到登录页面。最后在main.js中引入，可以写全局的验证，也可以写局部的，局部的是通过路由组件中的meta值判断,我一般里面是写一个oAuth通过他是否为true，然后判断，是否进入登录页面或者进入正常点击的页面。

  

  登录：写一个form表单验证，里面是判断登录的条件，比如用户名和密码的长度，是否为空，然后在点击登录的函数中，判断，并调用接口，传入用户名和密码的参数，判断是否获取到数据，没有就报错，有就保存token值和用户信息的值

  

  退出登录，调用退出登录的接口，并在组件中使用，点击退出登录的时候，删除token和用户信息的值。并跳转到登录页面。

  

  三级路由，比如是一个头部切换，和侧边栏切换。先进行整体的布局，在一个主组件中写入头部，然后放一个router-view在路由组件中写children。然后再在二级组件中写侧边栏，加一个router-view在路由组价中写入chidren包裹三级组价。这样就形成了三级路由嵌套。

  

  跨越问题，写三个js文件，第一个一般为vue.config里面写端口号，主机名等还有一些固定的代码，嗯，具体单词记不是很清楚，但是能直接用。然后另一个js文件里面写入，跨越的链接，进行分装。最后一个是防止端口号重复，备用的。写完这三个js文件后。然后封装api文件在里面创建js文件，写入要请求的数据，最后在要使用的组件中调用。

  

  loding加载，一般用element ui中的固定代码，在request请求响应文件中写入，最后在main.js中全局引用，也可以在组件中局部引用。

  

  请求头token值，一般请求数据都是要带token值的，所以在请求拦截器中获取token中，本地或vuex中的，如果没有返回null。然后在通过headers发送token值。

  

  分页功能，通知调用接口传参，传入页数和条数，一般根据需求可以自己定义页数和每页的条数，然后在点击的时候可以获取点击的下标，让下标等于穿过来的参数也就是我设定的页数，让他们相对应，再调用获取数据的接口就ok了。

  

  数据遍历，通过后台返回的数据，需要动态的获取里面的路由名和要跳转的名称，需要遍历出来，然后进行相对应的渲染，通过点击一级路由获取下标，传入到vuex里面然后在二级组件中获取数据并获取vuex中传过来的一级路由id，来获取二级路由的值，进行渲染。

  

  封装vuex，在进行登录的时候，获取登录后的token值。先封装一个js设置常量名然好封装函数，里面写入获取token值，然后返回该函数，还有存入token，获取存入和用户信息，已经删除。然后在另一个js文件中引入次文件中的函数名，然后在该文件中，state中先声明，然后在getters中是封装获取值，在mutations中是写人。最后在导出，在store下的index.js中引入。

  

  图片上传，使用element ui 里面的对话框然后里面包一个el-upload上传图片功能，首先绑定一个点击事件，在点击的时候，弹出上传图片的框，然后，里面有几个属性必须要传入进去，比如headers，传入token值，data 图片附带的id，action上传图片的地址。最后在上传后，有一个触发的钩子，写入里面固定的参数，然后判断是否成功，成功后调用一下渲染相册的数据。然后图片的上传功能。
  



​		跨域解决方案：在根目录下创建一个vue.config.js文件里面通过proxy配置解决跨越，里面设置一个           		target 代理地址，然后changeOrigin为true 开启代理，再配置一个pathRewrit让他为空



递归算法：

​	先在router下再创建一个js文件，然后const一个变量，比如是routes。里面写正常路由那一套，然后写个函数，获取路由信息，并且再封装一个函数，在第一个函数里面调用，并传入routes。然后在第二个函数中，配置自动生成路由的代码，首先，for循环一下routes的长度，然后再判断里面是否有路由的参数，如果没有配置路由，就终止。有的话，就继续往下，然后在const一个变量，比如为val 然后让他等于变量routes里面每个属性的路由。然后让他的没个属性的name值等于他本身或者让传入的路由使用replace全局转化为斜杆，因为路由必须用斜杆隔开。然后在让他的每个属性的path等于他本身或者定义的val并且用飘号符包裹，这个是es6的而且可以使用变量$。然后我们在let 一个比如是compontfun 让他等于正常要引入路由的那个写法，就是import 并且里面是用飘号包裹。然后让routes里面的每个属性的component等于componentfun；也就是重写component。最后转化子路由的conponent。用if判断一下children里面的也给他换成。最后导出第一个封装的函数，因为里面不是传入了routes。               并且再router下的index.js里面引入这个文件，



##### 微信小程序：

扫码购物：首先写一个点击事件，然后使用官方文档给的api接口，wx.scanCode，并调用扫码获取二维码的商品信息的接口，并吧数据保存到本地，然后在购物车页面获取过来，并渲染到页面。



授权登录功能：点击登录授权，必须是button按钮，然后有个open-type等于用户信息，并且触发一个点击事件。首页就是进入小程序的时候我们要先在生命周期onload函数中，先去判断是否有用户信息，如果没有的话就会去使用wx.getUserInfo去获取我们的用户信息。然后这个就要使用那个要触发的点击事件，去判断是否有用户信息，有的话就跳转到首页。



支付功能：当小程序启动的时候，调用wx.login获取小程序的code码，啊然后再调用openid接口，获取到openid，并且保存到本地，再当点击确认支付的时候，调用支付接口，并把对应的参数发送到后台，其中有一个签名非常重要，我是使用了md5去进行了加密。当调用的接口成功后，后台会给我们返回支付所需要的相关信息。当获取到支付对的相关相信后，调用微信的支付方式，并吧对应的支付信息穿进去就能完成支付功能。



购物车：购物车的话，一般就是商品的数量，加减了，删除等功能。一般的话，我是先封装了一个函数，里面去声明了两个变量，一个是商品的价格，一个是商品的数量，然后去遍历循环我们要渲染的数据，就计算，商品的价格和数量。并且用setData同步到我们的data中。加减功能的话，是先绑定一个点击事件，可以写两个不同的点击事件，也可以就写一个，我是写的一个，方便。然后使用data-operation的方法，加的话就传回去一个1，减的话就是-1。然后我们在js文件中，写这个方法，首先获取传递过来的值，然后获取购物车的数据，然后去查找对应的id，判断当小于1的时候，删除。否则的话，就是数量++。并调用我封装的那个函数。并且也在监听页面显示的那个函数里面也去调用一下我封装的函数。因为他可以实时的去更新和监听我的数据变化



获取门店位置功能：在文件中写入getLocation方法，并且调用微信小程序的API wx.getLocation来获取当前的位置，点击按钮的时候会弹出授权框进行授权。如果用户确认授权则会在success函数中返回对应的位置数据，





- 异步请求数据

  vue中通过在request.js中引入axios，然后创建axios实例，写请求和响应拦截，最后导出，然后在根目录下创建一个api文件，里面创建js文件，引入request，并且封装函数，获取接口。在需要数据的组件中，引入并调用。

  微信小程序中，在config.js文件里面写一个公共接口，并导出，然后在utils里面的request.js文件里引入，并，new 一个promis 里面有两个参数，一个是resolve成功后返回的，一个是reject失败后返回的，然后就是在创建一个获取数据的公共文件，创建对应的js文件，引入request文件，并使用class封装获取数据，并导出，在需要获取数据的页面中，引入这个文件，并调用封装好的函数，来获取数据。

- 

- **项目难点**

  我在写这个项目的时候主要遇到了哪些难点(刚开始是通过接口里面的数据来渲染出来对应的路由，还有接口的传参，还有上传图片的功能，主要就是这些。)

- **解决方案**

  这些难点的解决方式是(自己想着做，不断的实验，然后也上百度，找对应的功能，来对比自己的，再修改)

  上传图片的话，就是后台用element ui 里面的Upload上传功能根据new FormData的特性 并且首先绑定一个点击事件，在点击的时候，弹出上传图片的框，然后，里面有几个属性必须要传入进去，比如headers，传入token值，data 图片附带的id，action上传图片的地址。最后在上传后，有一个触发的钩子，写入里面固定的参数，然后判断是否成功，成功后调用一下渲染相册的数据。然后图片的上传功能。

- **项目总结**

  做完这个项目之后,我的收获是(我觉得我的收获还是挺大的，锻炼的写代码的能力，速度。还有思考能力，毕竟写代码就是要不断的想象思考，创新。)

## 四、面试官会问到的问题

1. **你们公司前端几个人?后端几个人?**

   要是问全部的这个我就记不清了，但是我们小组的是有八个人，两个前端，四个后端，一个产品，一个测试。

2. **后端用的语言?**

   **Java php**

3. **你这个项目是前后端分离吗?**

   是

4. **什么是前后端分离?说说你对前后端分离的理解?**

   - 什么是前后端分离?

   - 什么是前后端不分离?

   - 传统开发(前后端不分离)的缺点

   - **传统系统架构：**

     \1. 前端工程师负责编写HTML页面，完成前端页面设计。

     \2. 后端工程师使用模板技术将HTML页面代码转换为 JSP 页面，同时内嵌后端代码 (如Java）；

     前后端强依赖，后端必须要等前端的HTML开发好才能套转换成JSP。如果需求变更，前端HTML要改，后端

     JSP也要跟着变, 这是件紧紧牵绊的事，使得开发效率降低。

     \3. 产品交付时，要将前后端代码全部进行打包，部署到同一服务器上，或者进行简单的动静态分离部署。

   - 前后端分离的优点

   - **前后端分离架构：**

     \1. 前后端约定好API接口&数据&参数

     \2. 前后端并行开发

     前端工程师只需要编写HTM页面，通过HTTP请求调用后端提供的接口服务即可。

     后端只要愉快的开发接口就行了。

     无强依赖，如果需求变更,只要接口和参数不变，就不用两边都修改代码，开发效率高。

     \3. 除了开发阶段分离、在运行期前后端资源也会进行分离部署。

5. **你们的接口规范是什么?你知道RESTFUL吗?**

   1.必须以https开头，并以“/”结尾。

   1.协议规范 为进一步确保数据交互安全。正式地址(生产地址)必须遵循HTTPS协议。

   2.域名规范 每个项目要有且仅有一个自己唯一的域名+端口。在项目配置文件中要添加静态变量专门...

   由前端(APP端)和后端一起协定接口规范的内容,  RL), 输入(request)和输出(response), 必要的时候详细注释每一个字段的含义和数据类型.

   - 资源接口: 系统涉及到哪些资源, 按照 RESTful 方式定义的细粒度接口
   - 操作接口: 页面涉及到哪些操作, 例如修改购物车中商品的数量, 更换优惠券等等, 也可以使用 RESTful 方式来定义
   - 页面接口: 页面涉及到太多接口, 如果是一个个地调用, 会需要很多次请求, 有可以影响到前端的性能和用户感知(特别是首屏的体验), 因此可能需要将这些接口的数据合并到一起, 作成一个聚合型接口提供给前端来使用

   

   

   RESTFUL是一种网络应用程序的设计风格和开发方式，基于[HTTP](https://baike.baidu.com/item/HTTP/243074)，可以使用[XML](https://baike.baidu.com/item/XML/86251)格式定义或[JSON](https://baike.baidu.com/item/JSON/2462549)格式定义。RESTFUL适用于移动互联网厂商作为业务使能接口的场景，实现第三方[OTT](https://baike.baidu.com/item/OTT/9960940)调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源。

   RESTFUL特点包括：

   1、每一个URI代表1种资源；

   2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；

   3、通过操作资源的表现形式来操作资源；

   4、资源的表现形式是XML或者HTML；

   5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。

6. **那你说一下你和后台是如何交互的?或者说你和后台交互的方式有哪些**

   - 原生的ajax
   - jquery的ajax
   - axios
   - fetch
   - websocket

7. **ajax的通信原理是什么或者axios的原理是什么?**

   ajax：

   Ajax 通信实质上是 JavaScript 创建了一个 XMLHttpRequest 对象，这个对象有个 open() 方法其参数包含 URL，method，callback 等，通过这个方法设置其属性，而后通过 send() 方法向后台发送请求。

     var req; 

     function validate(){  

      var url="jjjjjj.jsp";     *//根据不同浏览器创建不同对象，这就是js让人蛋疼的解决浏览器不兼容问题的方式*   

     if(window.XMLHttpRequest){     

     req = new XMLHttpRequest();  

     } else if(window.ActiveXObject){*//这个是IE浏览器*      

   ​       req = new ActiveXObject("Mivrosoft.XMLHTTP");    

    }    

    req.open("GET",url,callback);     *//当状态码（代表请求发送的阶段）改变的时候调用callback*    

    req.onreadystatechange = callback;    

    req.send(null);  

   } 

     function callback(){    

      if(req.status == 200){      

   ​         alert(req.responseText();      

   ​    }  

    }

   axios：

   2、axios有哪些常用方法？
    答：
    一、axios.get(url[, config])   //get请求用于列表和信息查询
    二、axios.delete(url[, config])  //删除
    三、axios.post(url[, data[, config]])  //post请求用于信息的添加
    四、axios.put(url[, data[, config]])  //更新操作

   1、axios的特点有哪些？
    答：
    一、Axios 是一个基于 promise 的 HTTP 库，支持promise所有的API
    二、它可以拦截请求和响应
    三、它可以转换请求数据和响应数据，并对响应回来的内容自动转换成 JSON类型的数据
    四、安全性更高，客户端支持防御 XSRF

   ​     CSRF（Cross-site request forgery跨站请求伪造，也被称成为“one click attack”或          者session riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用

   **CSRF攻击的核心在于：**
   1、攻击者通过已有的cookie进行了合法验证；
   2、浏览器的同源策略决定了攻击者通过image链接等方式伪造跨站请

   **防范核心在于：**
   不让攻击者得到合法的验证信息

   **防御CSRF攻击：**

     目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。https://www.jianshu.com/p/401f5642ea63

8. **什么是vuex，他的作用：**

   1：vuex是一个专门为vue.js应用程序开发的状态管理模式
   vuex可以帮助我们管理共享状态，也就是管理全局变量
   vuex的几个核心概念：
   vuex使用一个store对象管理应用的状态，一个store包括：state,getter，mutation,action四个属性
   state:state意为'状态'，是vuex状态管理的数据源
   getter:getter的作用与filters有一些相似，可以将state进行过滤后输出
   mutation:mutation是vuex中改变state的唯一途径，并且只能同步操作
   action:一些对state的异步操作可以放在action中，并通过在action提交mutaion变更状态
   module:当store对象过于庞大时，可以根据具体的业务需求分为多个module

   我们可以在组件中触发 Action，Action 则会提交 Mutation，Mutaion 会对 State 进行修改，组件再根据 State 、Getter 渲染页面

9. **vue-router**

   ​		Vue Router 是 [Vue.js](http://cn.vuejs.org/) 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌

10. #### 防抖节流：

    **函数防抖(debounce)：**触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。

    - 实现方式：每次触发事件时设置一个延迟调用方法，并且取消之前的延时调用方法
    - 缺点：如果事件在规定的时间间隔内被不断的触发，则调用方法会被不断的延迟

    **函数节流(throttle)：****高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率。**

    实现方式：每次触发事件时，如果当前有等待执行的延时函数，则直接return

    **函数节流（throttle）**与 **函数防抖（debounce）**都是为了限制函数的执行频次，以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。

11. ### 什么是懒加载

    ###### 　　懒加载也就是延迟加载或者按需加载，即在需要的时候进行加载。

12. ### 为什么在Vue路由中使用懒加载？

    　　像vue这种单页面应用，如果没有应用懒加载，运用webpack打包后的文件将会异常的大，造成进入首页时，需要加载的内容过多，时间过长，会出啊先长时间的白屏，即使做了loading也是不利于用户体验，而运用懒加载则可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力，减少首页加载用时；

    　　简单的说就是：进入首页不用一次加载过多资源造成用时过长；

    ***实现方式***：

    　　方案一： 在路由文件中使用component后面 reslove=>require(["../components/HelloWorld.vue"],reslove) 来引入组件模板；

    方案二：在路由文件中使用 ()=>import("../components/HelloWorld.vue") 来引入组件模版；

13. ## v-model是什么

    v-model就是vue的双向绑定的指令，能将页面上控件输入的值同步更新到相关绑定的data属性，也会在更新data绑定属性时候，更新页面上输入控件的值。

14. **什么是插槽**

    插槽就是子组件中的提供给父组件使用的一个占位符，用<slot></slot> 表示，父组件可以在这个占位符中填充任何模板代码，如 HTML、组件等，填充的内容会替换子组件的<slot></slot>标签。

15. **vue单页面和多页面开发的概念及优点**

    **单页面应用开发（spa）**

    　概念：只有一个html页面，所以跳转的方式是组件之间的切换

      优点：跳转流畅；组件化开发；组件可复用；开发便捷

    　缺点：首屏加载过慢；seo优化不好

    **多页面应用开发（mpa）**

    　概念：有多个页面，跳转方式是页面之间的跳转

      优点：首屏加载快；seo优化好

    　缺点：跳转流畅

16. **axios或者ajax或者vue中跨域是什么解决的,都有哪些方案?**

    - **为什么要有跨域?**

      ​		跨域限制是服务端的一个行为，当开启对某些域名的访问限制后，只有同域或指定域

      下的页面可以调用，这样相对来说更安全，图片也可以防盗链 跨域限制一般只在浏

      览器端存在，对于服务端或 OS Android 等客户端是不存在的。

    - **什么时候跨域? 介绍同源策略**

      浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域

      在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。在请求的过程中我们要想回去数据一般都是post/get请求，所以..跨域问题出现

      跨域问题来源于JavaScript的同源策略，即只有 协议+主机名+端口号(如存在)相同，则允许相互访问。也就是说JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的，html本身没有跨域问题，比如a标签、script标签、甚至form标签（可以直接跨域发送数据并接收数据）等

    - **跨域的方式有哪几种?** 

      - jsonp
      - vue中通过config.js在里面的proxy(代理)里面进行配置
      - iframe
      - node写一个代理
      - Cros(后端允许跨域)

    - **在项目开发中一般都用那种方式?**

      自己总结   config.js

17. **请你说一下jsonp的原理?**

    浏览器的同源策略把跨域请求都禁止了，但是页面中的 <script><img><iframe>标签是例外，不受同源策略限制。

    Jsonp 就是利用 <script> 标签跨域特性进行跨域数据访问。

    JSONP 的理念就是，与服务端约定好一个回调函数名，服务端接收到请求后，将返回一段 Javascript，在这段 Javascript 代码中调用了约定好的回调函数，并且将数据作为参数进行传递。当网页接收到这段 Javascript 代码后，就会执行这个回调函数，这时数据已经成功传输到客户端了。

    JSONP 的缺点是：它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。

18. **请你说一下iframe是如何跨域的?**

    自己查

    采用JavaScript来控制iframe元素的高度是iframe高度自适应的关键，同时由于JavaScript对不同域名下权限的控制，引发出同域、跨域两种情况

19. **你项目的难点是什么?**

    自己去总结

20. **你是怎么解决这些难点的?**

    自己去总结

21. **你这个项目是H5还是app?**

    根据自己简历写的项目去回答

22. **如果是app的话,请问你们的这个app是那种app? 是原生app?还是混合app?还是webapp?**

    根据自己找的项目来回答

23. **什么是原生app?**

    原生App实际上是一种基于智能手机本地操作系统如Android、IOS和Windows Phone并且使用原生程序编写运行的第三方移动应用程序。开发原生App软件需要针对不同智能手机的操作系统来选择不同的App开发语言，如安卓App是Java开发语言、IOS APP是Objective-C语言、Windows Phone的APP开发是C##语言。

    如今市面上多数的APP软件开发都是使用的原生程序编写的应用程序，也就是说大部分的手机APP属于原生APP应用软件。原生APP因为位于平台层上方，所以向下访问和兼容的能力也比较好，可以支持在线或者离线消息推送或是进行本地资源访问，以及摄像拨号功能的调取。

    原生App

    原生APP又称Native App，该开发针对IOS、Android、Windows等不同的手机操作系统要采用不同的语言和框架进行开发，该模式通常是由“云服务器数据+APP应用客户端”两部份构成，APP应用所有的UI元素、数据内容、逻辑框架均安装在手机终端上。

    原生App

    1、每一种移动操作系统都需要独立的开发项目。

    2、每种平台都需要独立的开发语言。Java(Android), Objective-C(iOS)以及Visual C++(Windows phone)等等。

    3、需要使用各自的软件开发包，开发工具以及各自的控件。

    原生App

    能够与移动硬件设备的底层功能，比如个人信息，摄像头以及重力加速器等等。

    原生App

    1、直接下载到设备。

    2、以独立的应用程序运行(并不需要浏览器)。

    3、用户必须手动去下载并安装这些原生App。

    4、有一些商店与卖场来帮助用户寻找你的App，目前app市场不计其数。

24. **什么是混合app?**

    混合开发bai的App（Hybrid App）就是内嵌一du个轻量级的浏览器，一部分zhi原dao生的功能改为Html 5来开发，这部分功能不仅能够在不升级的情况下动态更新，而且可以在Android或iOS上同时运行，让用户的体验更好又可以节省开发的资源。
    其他特点
    在一个App中显示一个Html 5网页的功能，其实很简单，只要一个WebView就可以了。
    WebView 本来就支持js和Java相互调用，只需要开启 WebView 的JavaScript脚本执行，然后通过代码 mWebView.addJavascriptInterface(new JsBridge(), "bxbxbai"); 向Html 5页面时注入一个Java对象，然后就可以在Html 5页面中调用Native的功能了。

25. **什么是webapp?**

    web是一个站点的总bai称，任何站点都du可以称之为web。
    webAPP就是web应用，一个具有完zhi备实现某一个功能的程序，都可以称之dao为应用。比如一个看小说的阅读器，一个播放器等等。webAPP就是这类的应用是基于浏览器运行的。
    webAPP都是web，web不一定都是APP。
    大约就是这样。
    从开发的角度来看，并没有区别，都是开发～只是技术选型不同罢了。

26. **app是如何打包的?**

    - 将写好的vue项目通过npm run build 命令进行打包,但是打包之前我们需要将路由配置hash, 将vu e.config.js里面的publicPath配置为./
    - 打开hbuilderx,创建5+app项目
    - 保留manifest.json文件和unpackaged.json文件
    - 将vue打包后的dist目录的内容放到5+app目录里面
    - 在manifest.json文件里面可以配置打包的一些配置
    - 点击发行->选择云打包->最后生成打包后的链接或者.apk这样的一个文件

27. **你们项目是如何开发的?**

    - 需求 - 原型图 - 流程图 - 设计图 - 接口文档
    - 项目开发前的准备工作
    - 项目使用什么技术开发
    - 先开发的什么,后开发的什么
    - 开发完成之后做什么
    - 在公司里面一天

28. **什么是模块化开发?**

    模块化更一种开发规范，比bai如cmd amd 是为了更好的解藕，比如一du个网站，按照不zhi同的模块来开发dao，比如你有个评论区，a 项目有，b 项目有，如果仅是单纯的模块开发，这个js 文件你就可以单独来回引用，
    更比如 ，一个页面 分好多个功能， 这时候你要是都写在一个js 中 会越来越大，
    而你把他分成不同的模块，
    比如评论是一块
    分页又是一块，
    已经上线，或你不做了，后期别人拉手，或你接手别人的项目， 这时候来个需求让你把分页去掉，或修改 你可以清楚的找到对应模块文件 进行修改 或去掉
    模块是自定义的，
    组件，更想当于一个通用的东西，有的分功能组件，有的分业务组件
    大图切换，这种就是单纯的一个效果展示，只要调用就ok
    一个分页，也是只单纯的调用，
    组件更是一个多处都可以使用 ，不需要再单独开发的

29. **项目里都用到了哪些插件?**

    axios ,vuex ,element ui,echarts,vue-router, vuex-persistedstate,

    node-sass,sass-loader

30. **项目都用到了哪些技术点?**

    自己去总结

31. **请你说一下你项目当中具体的某几个功能是怎么实现的?**

    自己去总结

32. **你是如何完成第三方登录?或者说一下微信登录和qq登录的思路?**

    自己去总结

33. **项目如何上线?**

    - 不是你负责的,公司的项目上线是运维负责的,但是你知道项目大概怎么上线的
      - 购买域名以及购买服务器(域名需要认证,将近1个月的时间)
      - 购买的服务器上面搭建nginx服务器
      - 通过ftp工具将我们的项目上传到nginx服务器就可以(配置nginx跨域/代理)

34. **项目开发了多久?**

    按项目的开发周期

35. **项目开发了几期?每一期都有哪些功能或者优化了哪些部分?**

    自己去总结

36. **你对后端了解多少?**

    使用过,但很久了,很多东西已经忘了,但是可以快速上手

37. **你们项目开发的时候有没有什么代码规范?如果有的话你们的规范是什么?**

    1.所有文件夹以及文件使用英文命名,
    	  不得包含汉字（转义问题）空格（）和特殊字符（）。 （避免中文路径）

    	2.文件名使用多个单词,多个单词用驼峰命名法 || 下划线命名法 || 中横线命名法。
    	
    	3.CSS JS 按照对应的 HTML 命名 
    	
    	4.一些浏览器会将含有这些词的作为广告拦截，文件命名、id、class等所有命名避免以下次词汇。
    	  ad、ads、adv、banner、sponsor、gg、guangg、guanggao等


​    	  
​    		1.文件编码统一为utf-8，书写过程中，每行代码必须有分号
​    	
​    		2.变量命名：驼峰命名法 || 下划线命名法 || 中横线命名
​    	
​    		3.函数命名：首字母小写驼峰式命名 myVue()
​    	
​    		4.命名语义化：尽可能利用英文单词或其缩写
​    	
​    		5.代码结构明了，加适量注释，提高函数重用率
​    		
​    		6.注意与html分离，减小reflow，注意浏览器性能
​    		
​    			结构表现分离(HTML - CSS -JS 代码分离)
​    		页面性能方面（减少请求次数，例如使用精灵图和sass语法）

37. **你们这个项目都有了哪些框架?**

    element ui , bootstrap

38. **你们为什么用vue开发?为什么不用react?**

    - 学习成本
    - 踩坑成本

39. **在你写的项目中,你有没有封装过哪些模块或者组件?你是如何进行封装的?**

    自己总结

40. **你是如何进行组件话开发的?或者说一下你对最简化开发的理解?**

    自己总结

41. **说一下你在项目中是如何封装组件的?有没有什么需要注意的?**

    自己总结

42. **我们开发组件应该尊重什么原则?**

    你对组件开发的理解以及官方的描述:

    - 开放性
    - 封闭性
    - 粒度

43. **你觉你这个项目的亮点是什么?**

    代码层面

44. **你最近写的项目写完之后你的收获是什么?**

    自己总结

45. **你一共做过多少个项目?这些项目都有哪些类型的**

    自己总结

46. **最近做的这个项目?**

    自己根据自己简历写的项目去说

47. **你写的这个项目是h5还是app,还是pc端,还是安卓,还是ios?**

    自己总结

48. **为什么公司要做这个项目?**

    我刚去的时候项目都已经开始了,所以我也不太了解

49. **项目的开发周期多久?**

    自己总结

50. **项目的开始时间以及项目的结束时间?**

    自己根据简历上写的内容去总结

51. **项目一共分为多少期?**

    自己总结

52. **这几期每一期做到什么程度?每一期之间的区别是什么?或者描述一些每一期都做了耐饿功能和优化?**

    自己总结

53. **项目一共有多少个功能?那个功能你觉得最难?为什么?你是怎么解决的?**

    自己总结

54. **项目的开发流程?**

    开会讨论需求-> 出原型图-》流程图-〉设计图-》编码-〉测试-》上线

55. **项目是几个人开发的?**

    自己总结

56. **项目各自的分工是什么?你们是怎么划分任务的?**

    - 我都负责了哪些模块的开发
    - 领导划分任务

57. **公司的版本控制工具用的什么?**

    git svn -》 gitlab

58. **你们是如何进行多人协同开发的?**

    自己总结

59. **项目开发的前期你都在干什么?**

    自己总结

60. **如果让你重新再做这个项目,你觉的哪些 地方还可以再优化?**

    代码层面去分析

61. **你在做这个项目的时候,你是如何去排查bug?**

    自己总结

62. **你们这个项目前后端是怎么交互的?**

    ajax axios fetch ifrmae

63. **项目是如何上线的?项目上线流程是什么?**

    不是我负责的,但是我知道大概的流程

​		2：当多个状态(数据)分散在不同组件的各个角落,有大量状态(数据)需要相互间传递,		如果都放在后台,统一去后台获取,则网络开销会比较大,多层嵌套组件间就需要vuex		这样的解决方案,公共数据托管在state里,不同组件都可以使用

## 五、vue的面试题

##### 1. 说一下mvc模式、mvp模块和mvvm模块的区别是什么? 你都分别用过这几种模式的什么框架?

mvc:

MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。



mvp:

全称：Model-View-Presenter ；MVP 是从经典的模式MVC演变而来，它们的基本思想有相通的地方Controller/Presenter负责逻辑的处理，Model提供数据，View负责显示。



mvvm:

MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。当然这些事 ViewModel 已经帮我们做了，它可以取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。微软的WPF带来了新的技术体验，如Silverlight、音频、视频、3D、动画……，这导致了软件UI层更加细节化、可定制化。同时，在技术层面，WPF也带来了 诸如Binding、Dependency Property、Routed Events、Command、DataTemplate、ControlTemplate等新特性。MVVM（Model-View-ViewModel）框架的由来便是MVP（Model-View-Presenter）模式与WPF结合的应用方式时发展演变过来的一种新型架构框架。它立足于原有MVP框架并且把WPF的新特性糅合进去，以应对客户日益复杂的需求变化。



mvp与mvc

作为一种新的模式，MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter (MVC中的Controller)来进行的，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过 Controller。
 在MVC里，View是可以直接访问Model的！从而，View里会包含Model信息，不可避免的还要包括一些业务逻辑。 在MVC模型里，更关注的Model的改变，而同时有多个对Model的不同显示，即View。所以，在MVC模型里，Model不依赖于View，但是View是依赖于Model的。不仅如此，因为有一些业务逻辑在View里实现了，导致要更改View也是比较困难的，至少那些业务逻辑是无法重用的。
 虽然 MVC 中的 View 的确“可以”访问 Model，但是我们不建议在 View 中依赖 Model，而是要求尽可能把所有业务逻辑都放在 Controller 中处理，而 View 只和 Controller 交互。



mvvm与mvp区别

mvvm模式将Presener改名为View Model，基本上与MVP模式完全一致，唯一的区别是，它采用双向绑定(data-binding):   View的 变动，自动反映在View Model，反之亦然。这样开发者就不用处理接收事件和View更新的工作，框架已经帮你做好了



##### 2. 说一写你对vue生命周期的理解?

Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期

生命周期中有多个事件钩子，让我们在控制整个 vue 实例的过程时更容易形成好的逻辑

##### 3. vue的组件通信

##### 4. vue路由传值

##### 5. vue路由守卫

## 六、ES6面试题

## 七、小程序的面试题

## 八、WebPack面试题

## 九、页面性能优化面试题

## 十、移动端面试题

## 十一、JAVASCRIPT面试题

## 十二、H5与CSS3面试题

## 十三、HTTP状态码与协议面试题

## 十四、echarts面试题

## 十五、html与css面试题

## 十六、ajax面试题

## 十七、uni-app面试题

## 十八、git面试题

## 十九、websocket面试题


微信小程序支付:
        1. 当小程序启动的时候,调用wx.login获取小程序的code码
        2. 获取到小程序的code码之后,调用获取openid接口,获取到openid
        3. 将获取到的openid以及其他信息保存到本地
        4. 当点击确认支付按钮时调用统一下单接口,将对应的参数发送给后台,其中有一个签名非常重要,使用的md5进行的加密
        5. 当统一下单接口调用成功之后,后台会给我们返回支付所需要的相关信息
        6. 获取到支付相关的信息之后,调用封装的微信支付方法,拉起支付,把对应支付信息传进去就能够完成支付功能

        注意:加密以这块我们根据后台的要求,只加密了openid uid 以及salt等属性以及属性值,用的是md5




















